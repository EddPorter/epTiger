(*-------------------------------------
  This section ©1998 by Andrew W. Appel
  -------------------------------------*)

structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE
  | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS | IFX

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL
  
%value ID ("bogus")
%value INT (1)
%value STRING ("")

(*-------------------------------------
  This section ©2014 by Edd Porter
  -------------------------------------*)
  
%nonterm  program of A.exp
        | exp of A.exp
        | lvalue of A.var
        | expseq of (A.exp * pos) list
        | decs of A.dec list
        | dec of A.dec
        | tydec of A.dec | vardec of A.dec | fundec of A.dec
        | ty of A.ty
        | tyfields of A.field list
        | varexp of A.exp
        | tyafields of (A.symbol * A.exp * pos) list
        | funclist of A.exp list

%prefer THEN ELSE LPAREN

%nonassoc IFX
%nonassoc ELSE
%nonassoc ASSIGN  (* this makes a := 4*5 evaluate as a:=(4*5) not (a:=4)*5 *)
          DO      (* this makes the final expression WHILE a+b DO 4+5 bind together within the DO *)
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS

%%

program	: exp                          ( exp )

varexp: ID LBRACK exp RBRACK OF varexp ( A.ArrayExp{typ=Symbol.symbol(ID), size=exp, init=varexp, pos=IDleft} )
      | exp                             ( exp )

exp: LET decs IN expseq END             ( A.LetExp{decs=decs, body=A.SeqExp(expseq), pos=LETleft} )
   | INT                                ( A.IntExp(INT) )
   | STRING                             ( A.StringExp(STRING, STRINGleft) )
   | NIL                                ( A.NilExp )
   | BREAK                              ( A.BreakExp(BREAKleft) )
   | lvalue ASSIGN exp                  ( A.AssignExp{var=lvalue, exp=exp, pos=ASSIGNleft} )
   | lvalue                             ( A.VarExp(lvalue) )
   | IF exp THEN exp ELSE exp           ( A.IfExp{test=exp1, then'=exp2, else'=SOME exp3, pos=IFleft} )
   | IF exp THEN exp %prec IFX          ( A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft} )
   | WHILE exp DO exp                   ( A.WhileExp{test=exp1, body=exp2, pos=WHILEleft} )
   | FOR ID ASSIGN exp TO exp DO exp    ( A.ForExp{var=Symbol.symbol(ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft} )
   | ID LPAREN funclist RPAREN          ( A.CallExp{func=Symbol.symbol(ID), args=funclist, pos=IDleft} )
   | ID LBRACE tyafields RBRACE         ( A.RecordExp{fields=tyafields, typ=Symbol.symbol(ID), pos=IDleft} )
   | exp AND exp                        ( A.IfExp{test=exp1, then'=exp2, else'=SOME (A.IntExp(0)), pos=ANDleft} )
   | exp OR exp                         ( A.IfExp{test=exp1, then'=A.IntExp(1), else'=SOME exp2, pos=ORleft} )
   | exp EQ exp                         ( A.OpExp{left=exp1, oper=A.EqOp, right=exp2, pos=EQleft} )
   | exp NEQ exp                        ( A.OpExp{left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft} )
   | exp PLUS exp                       ( A.OpExp{left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft} )
   | exp MINUS exp                      ( A.OpExp{left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft} )
   | exp TIMES exp                      ( A.OpExp{left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft} )
   | exp DIVIDE exp                     ( A.OpExp{left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft} )
   | exp GT exp                         ( A.OpExp{left=exp1, oper=A.GtOp, right=exp2, pos=GTleft} )
   | exp GE exp                         ( A.OpExp{left=exp1, oper=A.GeOp, right=exp2, pos=GEleft} )
   | exp LT exp                         ( A.OpExp{left=exp1, oper=A.LtOp, right=exp2, pos=LTleft} )
   | exp LE exp                         ( A.OpExp{left=exp1, oper=A.LeOp, right=exp2, pos=LEleft} )
   | LPAREN expseq RPAREN               ( A.SeqExp( expseq ) )
   | MINUS exp %prec UMINUS             ( A.OpExp{left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft} )

(* expseq: zero or more expressions, separated by semi-colons *)
expseq: exp SEMICOLON expseq            ( (exp, expleft) :: expseq )
      | exp                             ( (exp, expleft) :: [] )
      |                                 ( [] )
      
(* a sequence of zero or more declarations separated by whitespace, i.e. no punctuation *)
decs: dec decs                          ( dec :: decs )
    |                                   ( [] )

dec: tydec                              ( tydec )
   | vardec                             ( vardec )
   | fundec                             ( fundec )

tydec: TYPE ID EQ ty                    ( A.TypeDec[{name=(Symbol.symbol(ID)), ty=ty, pos=TYPEleft}] )

ty: ARRAY OF ID                         ( A.ArrayTy(Symbol.symbol(ID), ARRAYleft) )
  | ID                                  ( A.NameTy(Symbol.symbol(ID), IDleft) )
  | LBRACE tyfields RBRACE              ( A.RecordTy(tyfields) )

(* zero or more record type declarations separated by commas *)
tyfields: ID COLON ID COMMA tyfields    ( {name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left} :: tyfields )
        | ID COLON ID                   ( {name=Symbol.symbol(ID1), escape=ref true, typ=Symbol.symbol(ID2), pos=ID1left} :: [] )
        |                               ( [] )
tyafields: ID EQ varexp COMMA tyafields ( (Symbol.symbol(ID), varexp, IDleft) :: tyafields )
        | ID EQ varexp                  ( (Symbol.symbol(ID), varexp, IDleft) :: [] )
        |                               ( [] )
        
vardec: VAR ID COLON ID ASSIGN varexp   ( A.VarDec{name=Symbol.symbol(ID1), escape=ref true, typ=SOME (Symbol.symbol(ID2), ID2left), init=varexp, pos=VARleft} )
      | VAR ID ASSIGN varexp            ( A.VarDec{name=Symbol.symbol(ID1), escape=ref true, typ=NONE, init=varexp, pos=VARleft} )

lvalue: lvalue DOT ID                   ( A.FieldVar(lvalue, Symbol.symbol(ID), DOTleft) )
      | ID                              ( A.SimpleVar(Symbol.symbol(ID), IDleft) )
      | lvalue LBRACK exp RBRACK        ( A.SubscriptVar(lvalue, exp, LBRACKleft) )
      
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp           ( A.FunctionDec [{name=Symbol.symbol(ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}] )
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp  ( A.FunctionDec [{name=Symbol.symbol(ID1), params=tyfields, result=SOME (Symbol.symbol(ID2), ID2left), body=exp, pos=FUNCTIONleft}] )      
      
funclist: exp COMMA funclist            ( exp :: funclist )
        | exp                           ( exp :: [] )
        |                               ( [] )